package canvas

import (
	"image"
	"image/color"
	"math"
	"reflect"
	"testing"
)

func TestContextDrawing(t *testing.T) {
	tests := []struct {
		name string
		draw func(*Context)
		want []byte
	}{
		{
			"Arc",
			func(ctx *Context) { ctx.Arc(5, 10, 15, 0, 0.75, true) },
			[]byte{
				0x01,
				0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x3f, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x01,
			},
		},
		{
			"ArcTo",
			func(ctx *Context) { ctx.ArcTo(100, 50, 80, 60, 25) },
			[]byte{
				0x02,
				0x40, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			"BeginPath",
			func(ctx *Context) { ctx.BeginPath() },
			[]byte{0x03},
		},
		{
			"BezierCurveTo",
			func(ctx *Context) { ctx.BezierCurveTo(230, 30, 150, 80, 250, 100) },
			[]byte{
				0x04,
				0x40, 0x6c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x62, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x6f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			"ClearRect",
			func(ctx *Context) { ctx.ClearRect(10, 20, 120, 80) },
			[]byte{
				0x05,
				0x40, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			"Clip",
			func(ctx *Context) { ctx.Clip() },
			[]byte{0x06},
		},
		{
			"ClosePath",
			func(ctx *Context) { ctx.ClosePath() },
			[]byte{0x07},
		},
		{
			"CreateImageData",
			func(ctx *Context) {
				img := image.NewRGBA(image.Rect(0, 0, 4, 3))
				for i := range img.Pix {
					img.Pix[i] = byte(i)
				}
				ctx.CreateImageData(img)
			},
			[]byte{
				0x08,
				0x00, 0x00, 0x00, 0x00, // ID
				0x00, 0x00, 0x00, 0x04, // Width
				0x00, 0x00, 0x00, 0x03, // Height
				// Pixels
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
				0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
			},
		},
		{
			"CreateImageData: ID generation",
			func(ctx *Context) {
				ctx.CreateImageData(image.NewRGBA(image.Rect(0, 0, 0, 0)))
				ctx.CreateImageData(image.NewRGBA(image.Rect(0, 0, 0, 0)))
				ctx.CreateImageData(image.NewRGBA(image.Rect(0, 0, 0, 0)))
			},
			[]byte{
				0x08,                   // CreateImageData
				0x00, 0x00, 0x00, 0x00, // ID = 0
				0x00, 0x00, 0x00, 0x00, // Width
				0x00, 0x00, 0x00, 0x00, // Height
				0x08,                   // CreateImageData
				0x00, 0x00, 0x00, 0x01, // ID = 1
				0x00, 0x00, 0x00, 0x00, // Width
				0x00, 0x00, 0x00, 0x00, // Height
				0x08,                   // CreateImageData
				0x00, 0x00, 0x00, 0x02, // ID = 2
				0x00, 0x00, 0x00, 0x00, // Width
				0x00, 0x00, 0x00, 0x00, // Height
			},
		},
		{
			"DrawImage",
			func(ctx *Context) {
				img := ctx.CreateImageData(image.NewRGBA(image.Rect(0, 0, 0, 0)))
				ctx.DrawImage(img, 80, 90)
			},
			[]byte{
				0x08,                   // CreateImageData
				0x00, 0x00, 0x00, 0x00, // ID
				0x00, 0x00, 0x00, 0x00, // Width
				0x00, 0x00, 0x00, 0x00, // Height

				0x0d,                   // DrawImage
				0x00, 0x00, 0x00, 0x00, // ID
				0x40, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // dx
				0x40, 0x56, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, // dy
			},
		},
		{
			"Ellipse",
			func(ctx *Context) { ctx.Ellipse(100, 80, 50, 75, math.Pi/4, 0, 2*math.Pi, true) },
			[]byte{
				0x0e,
				0x40, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x52, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x3f, 0xe9, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x19, 0x21, 0xfb, 0x54, 0x44, 0x2d, 0x18,
				0x01,
			},
		},
		{
			"Fill",
			func(ctx *Context) { ctx.Fill() },
			[]byte{0x0f},
		},
		{
			"FillRect",
			func(ctx *Context) { ctx.FillRect(250, 120, 70, 65) },
			[]byte{
				0x10,
				0x40, 0x6f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x51, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x50, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			"SetFillStyle",
			func(ctx *Context) { ctx.SetFillStyle(color.RGBA{R: 10, G: 20, B: 30, A: 255}) },
			[]byte{
				0x11,
				0x0a, 0x14, 0x1e, 0xff,
			},
		},
		{
			"FillText",
			func(ctx *Context) { ctx.FillText("test äöü", 22, 38) },
			[]byte{
				0x12,
				0x40, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // x
				0x40, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // y
				0x00, 0x00, 0x00, 0x0b, // len(text)
				0x74, 0x65, 0x73, 0x74, 0x20, 0xc3, 0xa4, 0xc3, 0xb6, 0xc3, 0xbc, // text
			},
		},
		{
			"FillTextMaxWidth",
			func(ctx *Context) { ctx.FillTextMaxWidth("Hello, 世界", 45, 52, 100) },
			[]byte{
				0x39,
				0x40, 0x46, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, // x
				0x40, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // y
				0x40, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // maxWidth
				0x00, 0x00, 0x00, 0x0d, // len(text)
				0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, // text "Hello, "
				0xe4, 0xb8, 0x96, 0xe7, 0x95, 0x8c, // text "世界"
			},
		},
		{
			"SetFont",
			func(ctx *Context) { ctx.SetFont("Helvetica") },
			[]byte{
				0x13,
				0x00, 0x00, 0x00, 0x09, // len(font)
				0x48, 0x65, 0x6c, 0x76, 0x65, 0x74, 0x69, 0x63, 0x61, // font
			},
		},
		{
			"SetGlobalAlpha",
			func(ctx *Context) { ctx.SetGlobalAlpha(0.5) },
			[]byte{
				0x17,
				0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			"SetGlobalCompositeOperation",
			func(ctx *Context) {
				ctx.SetGlobalCompositeOperation(OpSourceOver)
				ctx.SetGlobalCompositeOperation(OpSourceIn)
				ctx.SetGlobalCompositeOperation(OpSourceOut)
				ctx.SetGlobalCompositeOperation(OpSourceAtop)
				ctx.SetGlobalCompositeOperation(OpLuminosity)
			},
			[]byte{
				0x18, 0x00,
				0x18, 0x01,
				0x18, 0x02,
				0x18, 0x03,
				0x18, 0x19,
			},
		},
		{
			"SetImageSmoothingEnabled",
			func(ctx *Context) {
				ctx.SetImageSmoothingEnabled(false)
				ctx.SetImageSmoothingEnabled(true)
			},
			[]byte{
				0x19, 0x00,
				0x19, 0x01,
			},
		},
		{
			"SetLineCap",
			func(ctx *Context) {
				ctx.SetLineCap(CapButt)
				ctx.SetLineCap(CapRound)
				ctx.SetLineCap(CapSquare)
			},
			[]byte{
				0x1c, 0x00,
				0x1c, 0x01,
				0x1c, 0x02,
			},
		},
		{
			"SetLineDashOffset",
			func(ctx *Context) { ctx.SetLineDashOffset(0.3) },
			[]byte{
				0x1d,
				0x3f, 0xd3, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
			},
		},
		{
			"SetLineJoin",
			func(ctx *Context) {
				ctx.SetLineJoin(JoinMiter)
				ctx.SetLineJoin(JoinRound)
				ctx.SetLineJoin(JoinBevel)
			},
			[]byte{
				0x1e, 0x00,
				0x1e, 0x01,
				0x1e, 0x02,
			},
		},
		{
			"LineTo",
			func(ctx *Context) { ctx.LineTo(10, 20) },
			[]byte{
				0x1f,
				0x40, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			"SetLineWidth",
			func(ctx *Context) { ctx.SetLineWidth(2.5) },
			[]byte{
				0x20,
				0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			"SetMiterLimit",
			func(ctx *Context) { ctx.SetMiterLimit(5) },
			[]byte{
				0x22,
				0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			"MoveTo",
			func(ctx *Context) { ctx.MoveTo(300, 200) },
			[]byte{
				0x23,
				0x40, 0x72, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			"PutImageData",
			func(ctx *Context) {
				img := ctx.CreateImageData(image.NewNRGBA(image.Rect(0, 0, 0, 0)))
				ctx.PutImageData(img, 30, 45)
			},
			[]byte{
				0x08,                   // CreateImageData
				0x00, 0x00, 0x00, 0x00, // ID
				0x00, 0x00, 0x00, 0x00, // Width
				0x00, 0x00, 0x00, 0x00, // Height
				0x24,                   // PutImageData
				0x00, 0x00, 0x00, 0x00, // ID
				0x40, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // dx
				0x40, 0x46, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, // dy
			},
		},

		{
			"SetShadowBlur",
			func(ctx *Context) { ctx.SetShadowBlur(15) },
			[]byte{
				0x2d,
				0x40, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			draws := make(chan []byte)
			ctx := newContext(800, 600, draws, nil, nil)
			go func(draw func(*Context)) {
				draw(ctx)
				ctx.Flush()
			}(tt.draw)
			got := <-draws
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("\ngot : %#02v\nwant: %#02v", got, tt.want)
			}
		})
	}
}
