package canvas

import (
	"image"
	"reflect"
	"testing"
)

func TestContextDrawing(t *testing.T) {
	tests := []struct {
		name string
		draw func(*Context)
		want []byte
	}{
		{
			"Arc",
			func(ctx *Context) { ctx.Arc(5, 10, 15, 0, 0.75, true) },
			[]byte{
				0x01,
				0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x3f, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x01,
			},
		},
		{
			"ArcTo",
			func(ctx *Context) { ctx.ArcTo(100, 50, 80, 60, 25) },
			[]byte{
				0x02,
				0x40, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			"BeginPath",
			func(ctx *Context) { ctx.BeginPath() },
			[]byte{0x03},
		},
		{
			"BezierCurveTo",
			func(ctx *Context) { ctx.BezierCurveTo(230, 30, 150, 80, 250, 100) },
			[]byte{
				0x04,
				0x40, 0x6c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x62, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x6f, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			"ClearRect",
			func(ctx *Context) { ctx.ClearRect(10, 20, 120, 80) },
			[]byte{
				0x05,
				0x40, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			"Clip",
			func(ctx *Context) { ctx.Clip() },
			[]byte{0x06},
		},
		{
			"ClosePath",
			func(ctx *Context) { ctx.ClosePath() },
			[]byte{0x07},
		},
		{
			"CreateImageData",
			func(ctx *Context) {
				img := image.NewRGBA(image.Rect(0, 0, 4, 3))
				for i := range img.Pix {
					img.Pix[i] = byte(i)
				}
				ctx.CreateImageData(img)
			},
			[]byte{
				0x08,
				0x00, 0x00, 0x00, 0x00, // ID
				0x00, 0x00, 0x00, 0x04, // Width
				0x00, 0x00, 0x00, 0x03, // Height
				// Pixels
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
				0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
			},
		},
		{
			"CreateImageData: ID generation",
			func(ctx *Context) {
				ctx.CreateImageData(image.NewRGBA(image.Rect(0, 0, 0, 0)))
				ctx.CreateImageData(image.NewRGBA(image.Rect(0, 0, 0, 0)))
				ctx.CreateImageData(image.NewRGBA(image.Rect(0, 0, 0, 0)))
			},
			[]byte{
				0x08, // CreateImageData
				0x00, 0x00, 0x00, 0x00, // ID = 0
				0x00, 0x00, 0x00, 0x00, // Width
				0x00, 0x00, 0x00, 0x00, // Height
				0x08, // CreateImageData
				0x00, 0x00, 0x00, 0x01, // ID = 1
				0x00, 0x00, 0x00, 0x00, // Width
				0x00, 0x00, 0x00, 0x00, // Height
				0x08, // CreateImageData
				0x00, 0x00, 0x00, 0x02, // ID = 2
				0x00, 0x00, 0x00, 0x00, // Width
				0x00, 0x00, 0x00, 0x00, // Height
			},
		},
		{
			"DrawImage",
			func(ctx *Context) {
				img := ctx.CreateImageData(image.NewRGBA(image.Rect(0, 0, 0, 0)))
				ctx.DrawImage(img, 80, 90)
			},
			[]byte{
				0x08, // CreateImageData
				0x00, 0x00, 0x00, 0x00, // ID
				0x00, 0x00, 0x00, 0x00, // Width
				0x00, 0x00, 0x00, 0x00, // Height

				0x0d, // DrawImage
				0x00, 0x00, 0x00, 0x00, // ID
				0x40, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // dx
				0x40, 0x56, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, // dy
			},
		},
		{
			"LineTo",
			func(ctx *Context) { ctx.LineTo(10, 20) },
			[]byte{
				0x1f,
				0x40, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x40, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
		},
		{
			"SetLineCap",
			func(ctx *Context) {
				ctx.SetLineCap(CapButt)
				ctx.SetLineCap(CapRound)
				ctx.SetLineCap(CapSquare)
			},
			[]byte{
				0x1c, 0x00,
				0x1c, 0x01,
				0x1c, 0x02,
			},
		},
	}
	for _, tt := range tests {
		draws := make(chan []byte)
		ctx := newContext(800, 600, draws, nil, nil)
		go func(draw func(*Context)) {
			draw(ctx)
			ctx.Flush()
		}(tt.draw)
		got := <-draws
		if !reflect.DeepEqual(got, tt.want) {
			t.Errorf("%s:\ngot : %#02v\nwant: %#02v", tt.name, got, tt.want)
		}
	}
}
